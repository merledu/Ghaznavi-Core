$version Generated by VerilatedVcd $end
$date Mon Oct 21 16:03:13 2019
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 l clock $end
  $var wire  1 p io_branch $end
  $var wire  1 q io_branch2 $end
  $var wire 32 n io_instruction [31:0] $end
  $var wire 32 o io_reg_out [31:0] $end
  $var wire  1 m reset $end
  $scope module Top $end
   $var wire  1 l DataMemory_clock $end
   $var wire 32 } DataMemory_io_Data [31:0] $end
   $var wire  1 u DataMemory_io_MemRead $end
   $var wire  1 s DataMemory_io_MemWrite $end
   $var wire  8 6 DataMemory_io_wrAddr [7:0] $end
   $var wire 32 + DataMemory_io_wrData [31:0] $end
   $var wire 32 * Jalr_io_A [31:0] $end
   $var wire 32 1 Jalr_io_B [31:0] $end
   $var wire 32 7 Jalr_io_x [31:0] $end
   $var wire  1 l PC_clock $end
   $var wire 32 | PC_io_input [31:0] $end
   $var wire 32 H PC_io_pc [31:0] $end
   $var wire 32 I PC_io_pc4 [31:0] $end
   $var wire 32 , alu_io_A [31:0] $end
   $var wire  1 / alu_io_AluBranch $end
   $var wire  5 0 alu_io_Aluop [4:0] $end
   $var wire 32 - alu_io_B [31:0] $end
   $var wire 32 . alu_io_x [31:0] $end
   $var wire  3 $ alucontrol_io_Aluop [2:0] $end
   $var wire  3 z alucontrol_io_Func3 [2:0] $end
   $var wire  1 y alucontrol_io_Func7 $end
   $var wire  5 0 alucontrol_io_control [4:0] $end
   $var wire  1 l clock $end
   $var wire  3 $ control_io_ALUoperation [2:0] $end
   $var wire  1 t control_io_Branch2 $end
   $var wire  1 u control_io_MemRead $end
   $var wire  1 s control_io_MemoryWrite $end
   $var wire  1 u control_io_MemtoReg $end
   $var wire  1 # control_io_RegWrite $end
   $var wire  2 ' control_io_extend_sel [1:0] $end
   $var wire  2 ( control_io_next_PC_sel [1:0] $end
   $var wire  7 r control_io_opcode [6:0] $end
   $var wire  2 % control_io_operand_A_sel [1:0] $end
   $var wire  1 & control_io_operand_B_sel $end
   $var wire 32 1 immediate_io_I_Immediate [31:0] $end
   $var wire 32 n immediate_io_Instruction [31:0] $end
   $var wire 32 H immediate_io_PC [31:0] $end
   $var wire 32 3 immediate_io_SB_Immediate [31:0] $end
   $var wire 32 2 immediate_io_S_Immediate [31:0] $end
   $var wire 32 4 immediate_io_UJ_Immediate [31:0] $end
   $var wire 32 { immediate_io_U_Immediate [31:0] $end
   $var wire  1 l instmem_clock $end
   $var wire 32 5 instmem_io_rdData [31:0] $end
   $var wire 32 J instmem_io_wrAddr [31:0] $end
   $var wire  1 p io_branch $end
   $var wire  1 q io_branch2 $end
   $var wire 32 n io_instruction [31:0] $end
   $var wire 32 o io_reg_out [31:0] $end
   $var wire  1 l register_clock $end
   $var wire 32 ) register_io_WriteData [31:0] $end
   $var wire  5 v register_io_rd_sel [4:0] $end
   $var wire  1 # register_io_regwrite $end
   $var wire 32 * register_io_rs1 [31:0] $end
   $var wire  5 w register_io_rs1_sel [4:0] $end
   $var wire 32 + register_io_rs2 [31:0] $end
   $var wire  5 x register_io_rs2_sel [4:0] $end
   $var wire  1 m reset $end
   $scope module DataMemory $end
    $var wire  1 l clock $end
    $var wire 32 } io_Data [31:0] $end
    $var wire  1 u io_MemRead $end
    $var wire  1 s io_MemWrite $end
    $var wire  8 6 io_wrAddr [7:0] $end
    $var wire 32 + io_wrData [31:0] $end
    $var wire 10 D mem__T_20_addr [9:0] $end
    $var wire 32 + mem__T_20_data [31:0] $end
    $var wire  1 s mem__T_20_en $end
    $var wire  1 "2 mem__T_20_mask $end
    $var wire 10 D mem__T_23_addr [9:0] $end
    $var wire 32 C mem__T_23_data [31:0] $end
   $upscope $end
   $scope module Jalr $end
    $var wire 32 E ab [31:0] $end
    $var wire 33 F bc [32:0] $end
    $var wire 32 * io_A [31:0] $end
    $var wire 32 1 io_B [31:0] $end
    $var wire 32 7 io_x [31:0] $end
   $upscope $end
   $scope module PC $end
    $var wire  1 l clock $end
    $var wire 32 | io_input [31:0] $end
    $var wire 32 H io_pc [31:0] $end
    $var wire 32 I io_pc4 [31:0] $end
    $var wire 32 H pc1 [31:0] $end
   $upscope $end
   $scope module alu $end
    $var wire 32 , io_A [31:0] $end
    $var wire  1 / io_AluBranch $end
    $var wire  5 0 io_Aluop [4:0] $end
    $var wire 32 - io_B [31:0] $end
    $var wire 32 . io_x [31:0] $end
   $upscope $end
   $scope module alucontrol $end
    $var wire  3 $ io_Aluop [2:0] $end
    $var wire  3 z io_Func3 [2:0] $end
    $var wire  1 y io_Func7 $end
    $var wire  5 0 io_control [4:0] $end
   $upscope $end
   $scope module control $end
    $var wire  3 $ CtrlDecode_io_ALUoperation [2:0] $end
    $var wire  1 : CtrlDecode_io_Branch $end
    $var wire  1 t CtrlDecode_io_Branch2 $end
    $var wire  1 ; CtrlDecode_io_I_Type $end
    $var wire  1 = CtrlDecode_io_JAL $end
    $var wire  1 < CtrlDecode_io_JALR $end
    $var wire  1 > CtrlDecode_io_LUI $end
    $var wire  1 8 CtrlDecode_io_Load $end
    $var wire  1 u CtrlDecode_io_MemRead $end
    $var wire  1 s CtrlDecode_io_MemWrite $end
    $var wire  1 u CtrlDecode_io_MemtoReg $end
    $var wire  1 ~ CtrlDecode_io_R_Format $end
    $var wire  1 # CtrlDecode_io_RegWrite $end
    $var wire  1 9 CtrlDecode_io_Store $end
    $var wire  2 ' CtrlDecode_io_extend_sel [1:0] $end
    $var wire  2 ( CtrlDecode_io_next_PC_sel [1:0] $end
    $var wire  2 % CtrlDecode_io_operand_A_sel [1:0] $end
    $var wire  1 & CtrlDecode_io_operand_B_sel $end
    $var wire  1 : InstDecode_io_Branch $end
    $var wire  1 ; InstDecode_io_I_Type $end
    $var wire  1 = InstDecode_io_JAL $end
    $var wire  1 < InstDecode_io_JALR $end
    $var wire  1 > InstDecode_io_LUI $end
    $var wire  1 8 InstDecode_io_Load $end
    $var wire  1 ~ InstDecode_io_R_Format $end
    $var wire  1 9 InstDecode_io_Store $end
    $var wire  7 r InstDecode_io_opcode [6:0] $end
    $var wire  3 $ io_ALUoperation [2:0] $end
    $var wire  1 t io_Branch2 $end
    $var wire  1 u io_MemRead $end
    $var wire  1 s io_MemoryWrite $end
    $var wire  1 u io_MemtoReg $end
    $var wire  1 # io_RegWrite $end
    $var wire  2 ' io_extend_sel [1:0] $end
    $var wire  2 ( io_next_PC_sel [1:0] $end
    $var wire  7 r io_opcode [6:0] $end
    $var wire  2 % io_operand_A_sel [1:0] $end
    $var wire  1 & io_operand_B_sel $end
    $scope module CtrlDecode $end
     $var wire  3 $ io_ALUoperation [2:0] $end
     $var wire  1 : io_Branch $end
     $var wire  1 t io_Branch2 $end
     $var wire  1 ; io_I_Type $end
     $var wire  1 = io_JAL $end
     $var wire  1 < io_JALR $end
     $var wire  1 > io_LUI $end
     $var wire  1 8 io_Load $end
     $var wire  1 u io_MemRead $end
     $var wire  1 s io_MemWrite $end
     $var wire  1 u io_MemtoReg $end
     $var wire  1 ~ io_R_Format $end
     $var wire  1 # io_RegWrite $end
     $var wire  1 9 io_Store $end
     $var wire  2 ' io_extend_sel [1:0] $end
     $var wire  2 ( io_next_PC_sel [1:0] $end
     $var wire  2 % io_operand_A_sel [1:0] $end
     $var wire  1 & io_operand_B_sel $end
    $upscope $end
    $scope module InstDecode $end
     $var wire  1 : io_Branch $end
     $var wire  1 ; io_I_Type $end
     $var wire  1 = io_JAL $end
     $var wire  1 < io_JALR $end
     $var wire  1 > io_LUI $end
     $var wire  1 8 io_Load $end
     $var wire  1 ~ io_R_Format $end
     $var wire  1 9 io_Store $end
     $var wire  7 r io_opcode [6:0] $end
    $upscope $end
   $upscope $end
   $scope module immediate $end
    $var wire 32 1 io_I_Immediate [31:0] $end
    $var wire 32 n io_Instruction [31:0] $end
    $var wire 32 H io_PC [31:0] $end
    $var wire 32 3 io_SB_Immediate [31:0] $end
    $var wire 32 2 io_S_Immediate [31:0] $end
    $var wire 32 4 io_UJ_Immediate [31:0] $end
    $var wire 32 { io_U_Immediate [31:0] $end
    $var wire 31 "" output$ [30:0] $end
    $var wire 31 "" output1 [30:0] $end
    $var wire 31 ? output2 [30:0] $end
    $var wire 31 @ output3 [30:0] $end
    $var wire 46 "' output4 [45:0] $end
    $var wire 32 3 output5 [31:0] $end
    $var wire 32 4 output8 [31:0] $end
    $var wire 12 "! sbt1 [11:0] $end
    $var wire  6 "+ sbt10 [5:0] $end
    $var wire  1 ", sbt11 $end
    $var wire 13 "- sbt12 [12:0] $end
    $var wire 32 A sbt13 [31:0] $end
    $var wire  8 ". sbt14 [7:0] $end
    $var wire  1 "/ sbt15 $end
    $var wire 10 "0 sbt16 [9:0] $end
    $var wire 21 "1 sbt18 [20:0] $end
    $var wire 32 B sbt19 [31:0] $end
    $var wire  5 v sbt2 [4:0] $end
    $var wire  7 "# sbt3 [6:0] $end
    $var wire 12 "$ sbt4 [11:0] $end
    $var wire 20 "% sbt5 [19:0] $end
    $var wire 31 "& sbt6 [30:0] $end
    $var wire 46 "' sbt7 [45:0] $end
    $var wire  1 ") sbt8 $end
    $var wire  4 "* sbt9 [3:0] $end
   $upscope $end
   $scope module instmem $end
    $var wire  1 l clock $end
    $var wire 32 5 io_rdData [31:0] $end
    $var wire 32 J io_wrAddr [31:0] $end
    $var wire 10 k mem__T_12_addr [9:0] $end
    $var wire 32 5 mem__T_12_data [31:0] $end
    $scope module BindsTo_0_InstructionMemory_Inst $end
     $var wire  1 l clock $end
     $var wire 32 5 io_rdData [31:0] $end
     $var wire 32 J io_wrAddr [31:0] $end
    $upscope $end
   $upscope $end
   $scope module register $end
    $var wire  1 l clock $end
    $var wire 32 ) io_WriteData [31:0] $end
    $var wire  5 v io_rd_sel [4:0] $end
    $var wire  1 # io_regwrite $end
    $var wire 32 * io_rs1 [31:0] $end
    $var wire  5 w io_rs1_sel [4:0] $end
    $var wire 32 + io_rs2 [31:0] $end
    $var wire  5 x io_rs2_sel [4:0] $end
    $var wire 32 K registers_c_0 [31:0] $end
    $var wire 32 L registers_c_1 [31:0] $end
    $var wire 32 U registers_c_10 [31:0] $end
    $var wire 32 V registers_c_11 [31:0] $end
    $var wire 32 W registers_c_12 [31:0] $end
    $var wire 32 X registers_c_13 [31:0] $end
    $var wire 32 Y registers_c_14 [31:0] $end
    $var wire 32 Z registers_c_15 [31:0] $end
    $var wire 32 [ registers_c_16 [31:0] $end
    $var wire 32 \ registers_c_17 [31:0] $end
    $var wire 32 ] registers_c_18 [31:0] $end
    $var wire 32 ^ registers_c_19 [31:0] $end
    $var wire 32 M registers_c_2 [31:0] $end
    $var wire 32 _ registers_c_20 [31:0] $end
    $var wire 32 ` registers_c_21 [31:0] $end
    $var wire 32 a registers_c_22 [31:0] $end
    $var wire 32 b registers_c_23 [31:0] $end
    $var wire 32 c registers_c_24 [31:0] $end
    $var wire 32 d registers_c_25 [31:0] $end
    $var wire 32 e registers_c_26 [31:0] $end
    $var wire 32 f registers_c_27 [31:0] $end
    $var wire 32 g registers_c_28 [31:0] $end
    $var wire 32 h registers_c_29 [31:0] $end
    $var wire 32 N registers_c_3 [31:0] $end
    $var wire 32 i registers_c_30 [31:0] $end
    $var wire 32 j registers_c_31 [31:0] $end
    $var wire 32 O registers_c_4 [31:0] $end
    $var wire 32 P registers_c_5 [31:0] $end
    $var wire 32 Q registers_c_6 [31:0] $end
    $var wire 32 R registers_c_7 [31:0] $end
    $var wire 32 S registers_c_8 [31:0] $end
    $var wire 32 T registers_c_9 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
b001 $
b00 %
1&
b00 '
b00 (
b00000000000000000000000000000101 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000101 -
b00000000000000000000000000000101 .
0/
b00000 0
b00000000000000000000000000000101 1
b00000000000000000000000000000011 2
b00000000000000000000100000000010 3
b00000000000000000000100000000100 4
b00000000010100000000000110010011 5
b00000001 6
b00000000000000000000000000000100 7
08
09
0:
1;
0<
0=
0>
b0000000000000000000000000000011 ?
b0000000000000000000000000000011 @
b00000000000000000000100000000010 A
b00000000000000000000100000000100 B
b00000000000000000000000000000000 C
b0000000001 D
b00000000000000000000000000000101 E
b000000000000000000000000000000100 F
b00000000000000000000000000000000 H
b00000000000000000000000000000100 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b0000000000 k
0l
1m
b00000000010100000000000110010011 n
b00000000000000000000000000000101 o
0p
0q
b0010011 r
0s
0t
0u
b00011 v
b00000 w
b00101 x
0y
b000 z
b00000000010100000000000000000000 {
b00000000000000000000000000000100 |
b00000000000000000000000000000000 }
0~
b000000000101 "!
b0000000000000000000000000000101 ""
b0000000 "#
b000000000011 "$
b00000000010100000000 "%
b0000000000000000000010100000000 "&
b0000000000000000000000010100000000000000000000 "'
1")
b0001 "*
b000000 "+
0",
b0100000000010 "-
b00000000 ".
1"/
b0000000010 "0
b000000000100000000100 "1
1"2
#1
b00000000000000000000000000000100 )
b00000000000000000000000000000100 -
b00000000000000000000000000000100 .
b00000000000000000000000000000100 1
b00000000000000000000000000000010 2
b00000000000000000000000000000110 3
b00000000000000000000000000001000 4
b00000000010000000000000100010011 5
b0000000000000000000000000000010 ?
b0000000000000000000000000000010 @
b00000000000000000000000000000010 A
b00000000000000000000000000000100 B
b00000000000000000000000000000100 E
b00000000000000000000000000000100 H
b00000000000000000000000000001000 I
b00000000000000000000000000000001 J
b00000000000000000000000000000101 N
b0000000001 k
1l
b00000000010000000000000100010011 n
b00000000000000000000000000000100 o
b00010 v
b00100 x
b00000000010000000000000000000000 {
b00000000000000000000000000001000 |
b000000000100 "!
b0000000000000000000000000000100 ""
b000000000010 "$
b00000000010000000000 "%
b0000000000000000000010000000000 "&
b0000000000000000000000010000000000000000000000 "'
0")
b0000000000010 "-
0"/
b000000000000000000100 "1
#2
0l
#3
b011 $
b10 %
0&
b10 (
b00000000000000000000000000001100 )
b00000000000000000000000000001100 ,
b00000000000000000000000000000000 -
b00000000000000000000000000001100 .
b11111 0
b00000000000000000000000000010000 1
b00000000000000000000000000000001 2
b00000000000000000000100000001000 3
b00000000000000000000000000011000 4
b00000001000000000000000011101111 5
b00000011 6
b00000000000000000000000000010000 7
0;
1=
b0000000000000000000000000000001 ?
b0000000000000000000000000000001 @
b00000000000000000000100000000000 A
b00000000000000000000000000010000 B
b0000000011 D
b00000000000000000000000000010000 E
b000000000000000000000000000010000 F
b00000000000000000000000000001000 H
b00000000000000000000000000001100 I
b00000000000000000000000000000010 J
b00000000000000000000000000000100 M
b0000000010 k
1l
b00000001000000000000000011101111 n
b00000000000000000000000000001100 o
b1101111 r
b00001 v
b10000 x
b00000001000000000000000000000000 {
b00000000000000000000000000011000 |
b000000010000 "!
b0000000000000000000000000010000 ""
b000000000001 "$
b00000001000000000000 "%
b0000000000000000001000000000000 "&
b0000000000000000000001000000000000000000000000 "'
1")
b0000 "*
b0100000000000 "-
b0000001000 "0
b000000000000000010000 "1
#4
0l
#5
b000 $
b00 %
b00 (
b11111111111111111111111111111111 )
b00000000000000000000000000000100 *
b00000000000000000000000000000101 +
b00000000000000000000000000000100 ,
b00000000000000000000000000000101 -
b11111111111111111111111111111111 .
b01000 0
b00000000000000000000010000000011 1
b00000000000000000000010000000100 2
b00000000000000000000010000011100 3
b00000000000000010000110000011010 4
b01000000001100010000001000110011 5
b11111111 6
b00000000000000000000010000000110 7
0=
b0000000000000000000010000000100 ?
b0000000000000000000010000000100 @
b00000000000000000000010000000100 A
b00000000000000010000110000000010 B
b0011111111 D
b00000000000000000000010000000111 E
b000000000000000000000010000000110 F
b00000000000000000000000000011000 H
b00000000000000000000000000011100 I
b00000000000000000000000000000110 J
b00000000000000000000000000001100 L
b0000000110 k
1l
b01000000001100010000001000110011 n
b11111111111111111111111111111111 o
b0110011 r
b00100 v
b00010 w
b00011 x
1y
b01000000001100010000000000000000 {
b00000000000000000000000000011100 |
1~
b010000000011 "!
b0000000000000000000010000000011 ""
b0100000 "#
b010000000100 "$
b01000000001100010000 "%
b0000000000001000000001100010000 "&
b0000000000000001000000001100010000000000000000 "'
0")
b0010 "*
b100000 "+
b0010000000100 "-
b00010000 ".
1"/
b1000000001 "0
b000010000110000000010 "1
#6
0l
#7
b011 $
b10 %
b11 (
b00000000000000000000000000100000 )
b00000000000000000000000000001100 *
b00000000000000000000000000000000 +
b00000000000000000000000000100000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000100000 .
b11111 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000011100 3
b00000000000000001000000000011100 4
b00000000000000001000000001100111 5
b00001000 6
b00000000000000000000000000001100 7
1<
b0000000000000000000000000000000 ?
b0000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000001000000000000000 B
b0000001000 D
b00000000000000000000000000001100 E
b000000000000000000000000000001100 F
b00000000000000000000000000011100 H
b00000000000000000000000000100000 I
b00000000000000000000000000000111 J
b11111111111111111111111111111111 O
b0000000111 k
1l
b00000000000000001000000001100111 n
b00000000000000000000000000100000 o
b1100111 r
b00000 v
b00001 w
b00000 x
0y
b00000000000000001000000000000000 {
b00000000000000000000000000001100 |
0~
b000000000000 "!
b0000000000000000000000000000000 ""
b0000000 "#
b000000000000 "$
b00000000000000001000 "%
b0000000000000000000000000001000 "&
b0000000000000000000000000000001000000000000000 "'
b0000 "*
b000000 "+
b0000000000000 "-
b00001000 ".
0"/
b0000000000 "0
b000001000000000000000 "1
#8
0l
#9
0#
b101 $
b00 %
1&
b10 '
b00 (
b00000000000000000000000000000100 )
b00000000000000000000000000000000 *
b11111111111111111111111111111111 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000100 -
b00000000000000000000000000000100 .
b00000 0
b00000000000000000000000000000100 1
b00000000000000000000000000000100 2
b00000000000000000000000000010000 3
b00000000000000000010000000010000 4
b00000000010000000010001000100011 5
b00000001 6
b00000000000000000000000000000100 7
19
0<
b0000000000000000000000000000100 ?
b0000000000000000000000000000100 @
b00000000000000000000000000000100 A
b00000000000000000010000000000100 B
b0000000001 D
b00000000000000000000000000000100 E
b000000000000000000000000000000100 F
b00000000000000000000000000001100 H
b00000000000000000000000000010000 I
b00000000000000000000000000000011 J
b0000000011 k
1l
b00000000010000000010001000100011 n
b00000000000000000000000000000100 o
b0100011 r
1s
b00100 v
b00000 w
b00100 x
b010 z
b00000000010000000010000000000000 {
b00000000000000000000000000010000 |
b000000000100 "!
b0000000000000000000000000000100 ""
b000000000100 "$
b00000000010000000010 "%
b0000000000000000000010000000010 "&
b0000000000000000000000010000000010000000000000 "'
b0010 "*
b0000000000100 "-
b00000010 ".
b0000000010 "0
b000000010000000000100 "1
#10
0l
0m
#11
1#
b100 $
b00 '
b11111111111111111111111111111111 )
b00000000000000000000000000000101 2
b00000000000000000000100000010100 3
b00000000000000000010000000010100 4
b00000000010000000010001010000011 5
18
09
b0000000000000000000000000000101 ?
b0000000000000000000000000000101 @
b00000000000000000000100000000100 A
b11111111111111111111111111111111 C
b00000000000000000000000000010000 H
b00000000000000000000000000010100 I
b00000000000000000000000000000100 J
b0000000100 k
1l
b00000000010000000010001010000011 n
b11111111111111111111111111111111 o
b0000011 r
0s
1u
b00101 v
b00000000000000000000000000010100 |
b11111111111111111111111111111111 }
b000000000101 "$
1")
b0100000000100 "-
#12
0l
#13
0#
b010 $
0&
b01 (
b00000000000000000000000000000001 )
b11111111111111111111111111111111 *
b11111111111111111111111111111111 ,
b11111111111111111111111111111111 -
b00000000000000000000000000000001 .
1/
b10000 0
b00000000000000000000000000000101 1
b00000000000000000000000000001100 2
b00000000000000000000000000100000 3
b00000000000000100000100000011000 4
b00000000010100100000011001100011 5
b00000000 6
08
1:
b0000000000000000000000000001100 ?
b0000000000000000000000000001100 @
b00000000000000000000000000001100 A
b00000000000000100000100000000100 B
b00000000000000000000000000000000 C
b0000000000 D
b00000000000000000000000000010100 H
b00000000000000000000000000011000 I
b00000000000000000000000000000101 J
b11111111111111111111111111111111 P
b0000000101 k
1l
b00000000010100100000011001100011 n
b00000000000000000000000000000001 o
1p
1q
b1100011 r
1t
0u
b01100 v
b00100 w
b00101 x
b000 z
b00000000010100100000000000000000 {
b00000000000000000000000000100000 |
b00000000000000000000000000000000 }
b000000000101 "!
b0000000000000000000000000000101 ""
b000000001100 "$
b00000000010100100000 "%
b0000000000000000000010100100000 "&
b0000000000000000000000010100100000000000000000 "'
0")
b0110 "*
b0000000001100 "-
b00100000 ".
1"/
b000100000100000000100 "1
#14
0l
#15
b000 $
b00 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
0/
b00000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000100000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 7
0:
b0000000000000000000000000000000 ?
b0000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 E
b000000000000000000000000000000000 F
b00000000000000000000000000100000 H
b00000000000000000000000000100100 I
b00000000000000000000000000001000 J
b0000001000 k
1l
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
0p
0q
b0000000 r
0t
b00000 v
b00000 w
b00000 x
b00000000000000000000000000000000 {
b00000000000000000000000000100100 |
b000000000000 "!
b0000000000000000000000000000000 ""
b000000000000 "$
b00000000000000000000 "%
b0000000000000000000000000000000 "&
b0000000000000000000000000000000000000000000000 "'
b0000 "*
b0000000000000 "-
b00000000 ".
0"/
b0000000000 "0
b000000000000000000000 "1
#16
0l
#17
b00000000000000000000000000100100 3
b00000000000000000000000000100100 4
b00000000000000000000000000100100 H
b00000000000000000000000000101000 I
b00000000000000000000000000001001 J
b0000001001 k
1l
b00000000000000000000000000101000 |
#18
0l
#19
b00000000000000000000000000101000 3
b00000000000000000000000000101000 4
b00000000000000000000000000101000 H
b00000000000000000000000000101100 I
b00000000000000000000000000001010 J
b0000001010 k
1l
b00000000000000000000000000101100 |
#20
0l
#21
b00000000000000000000000000101100 3
b00000000000000000000000000101100 4
b00000000000000000000000000101100 H
b00000000000000000000000000110000 I
b00000000000000000000000000001011 J
b0000001011 k
1l
b00000000000000000000000000110000 |
#22
0l
#23
b00000000000000000000000000110000 3
b00000000000000000000000000110000 4
b00000000000000000000000000110000 H
b00000000000000000000000000110100 I
b00000000000000000000000000001100 J
b0000001100 k
1l
b00000000000000000000000000110100 |
#24
0l
#25
b00000000000000000000000000110100 3
b00000000000000000000000000110100 4
b00000000000000000000000000110100 H
b00000000000000000000000000111000 I
b00000000000000000000000000001101 J
b0000001101 k
1l
b00000000000000000000000000111000 |
#26
0l
#27
b00000000000000000000000000111000 3
b00000000000000000000000000111000 4
b00000000000000000000000000111000 H
b00000000000000000000000000111100 I
b00000000000000000000000000001110 J
b0000001110 k
1l
b00000000000000000000000000111100 |
#28
0l
#29
b00000000000000000000000000111100 3
b00000000000000000000000000111100 4
b00000000000000000000000000111100 H
b00000000000000000000000001000000 I
b00000000000000000000000000001111 J
b0000001111 k
1l
b00000000000000000000000001000000 |
#30
0l
#31
b00000000000000000000000001000000 3
b00000000000000000000000001000000 4
b00000000000000000000000001000000 H
b00000000000000000000000001000100 I
b00000000000000000000000000010000 J
b0000010000 k
1l
b00000000000000000000000001000100 |
#32
0l
#33
b00000000000000000000000001000100 3
b00000000000000000000000001000100 4
b00000000000000000000000001000100 H
b00000000000000000000000001001000 I
b00000000000000000000000000010001 J
b0000010001 k
1l
b00000000000000000000000001001000 |
#34
0l
#35
b00000000000000000000000001001000 3
b00000000000000000000000001001000 4
b00000000000000000000000001001000 H
b00000000000000000000000001001100 I
b00000000000000000000000000010010 J
b0000010010 k
1l
b00000000000000000000000001001100 |
#36
0l
#37
b00000000000000000000000001001100 3
b00000000000000000000000001001100 4
b00000000000000000000000001001100 H
b00000000000000000000000001010000 I
b00000000000000000000000000010011 J
b0000010011 k
1l
b00000000000000000000000001010000 |
